{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mykael Barnes\\\\Desktop\\\\Projects\\\\Melee Frame Data Quiz\\\\melee_quiz\\\\src\\\\components\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { questions } from './Questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet counter = 0;\n\nconst Quiz = () => {\n  _s();\n\n  const [fetchedQuestions, setFetchedQuestions] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [triggerChange, setTriggerChange] = useState(false);\n  let quizOrder = [];\n  const questionNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29];\n\n  function shuffleArray() {\n    for (var i = questionNumbers.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = questionNumbers[i];\n      questionNumbers[i] = questionNumbers[j];\n      questionNumbers[j] = temp;\n    } // for (let i = 0; i < 30; i++){\n    //     quizOrder.push(questionNumbers[i])\n    // }\n    // console.log(quizOrder)\n\n  }\n\n  useEffect(() => {\n    shuffleArray();\n\n    for (let i = 0; i < 30; i++) {\n      quizOrder.push(questionNumbers[i]);\n    } // console.log(quizOrder)\n\n\n    setIsLoading(false);\n  }, []); // useEffect(() => {\n  //     console.log(questions[questionNumbers[0]])\n  //     console.log(questions[questionNumbers[1]])\n  //     console.log(questions[questionNumbers[2]])\n  //     console.log(questions[questionNumbers[3]])\n  //     console.log(questions[questionNumbers[4]])\n  //     console.log(questions[questionNumbers[5]])\n  //     console.log(questions[questionNumbers[6]])\n  //     console.log(questions[questionNumbers[7]])\n  //     console.log(questions[questionNumbers[8]])\n  //     console.log(questions[questionNumbers[9]])\n  //     console.log(questions[questionNumbers[10]])\n  //     console.log(questions[questionNumbers[11]])\n  //     console.log(questions[questionNumbers[12]])\n  //     console.log(questions[questionNumbers[13]])\n  //     console.log(questions[questionNumbers[14]])\n  //     console.log(questions[questionNumbers[15]])\n  //     console.log(questions[questionNumbers[16]])\n  //     console.log(questions[questionNumbers[17]])\n  //     console.log(questions[questionNumbers[18]])\n  //     console.log(questions[questionNumbers[19]])\n  //     console.log(questions[questionNumbers[20]])\n  //     console.log(questions[questionNumbers[21]])\n  //     console.log(questions[questionNumbers[22]])\n  //     console.log(questions[questionNumbers[23]])\n  //     console.log(questions[questionNumbers[24]])\n  //     console.log(questions[questionNumbers[25]])\n  //     console.log(questions[questionNumbers[26]])\n  //     console.log(questions[questionNumbers[27]])\n  //     console.log(questions[questionNumbers[28]])\n  //     console.log(questions[questionNumbers[29]])\n  // },[triggerChange])\n\n  const handleQuestionChange = () => {\n    counter += 1;\n    console.log(counter);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-question-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: isLoading ? 'loading question...' : questions[questionNumbers[counter]].question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleQuestionChange,\n      children: \"Next Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Quiz, \"dUqd45z4hShpWTajH8B+TwTZ/LY=\");\n\n_c = Quiz;\nexport default Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Users/Mykael Barnes/Desktop/Projects/Melee Frame Data Quiz/melee_quiz/src/components/Quiz.js"],"names":["React","useEffect","useState","questions","counter","Quiz","fetchedQuestions","setFetchedQuestions","isLoading","setIsLoading","triggerChange","setTriggerChange","quizOrder","questionNumbers","shuffleArray","i","length","j","Math","floor","random","temp","push","handleQuestionChange","console","log","question"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,IAAIC,OAAO,GAAG,CAAd;;AAGA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AAGf,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CL,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,KAAD,CAAlD;AAIA,MAAIU,SAAS,GAAG,EAAhB;AACA,QAAMC,eAAe,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,EAA2C,EAA3C,EAA+C,EAA/C,EAAmD,EAAnD,EAAuD,EAAvD,EAA2D,EAA3D,EAA+D,EAA/D,EAAmE,EAAnE,EAAuE,EAAvE,EAA2E,EAA3E,EAA+E,EAA/E,EAAmF,EAAnF,EAAuF,EAAvF,EAA2F,EAA3F,EAA+F,EAA/F,EAAmG,EAAnG,EAAuG,EAAvG,EAA2G,EAA3G,CAAxB;;AAGA,WAASC,YAAT,GAAwB;AACpB,SAAK,IAAIC,CAAC,GAAGF,eAAe,CAACG,MAAhB,GAAyB,CAAtC,EAAyCD,CAAC,GAAG,CAA7C,EAAgDA,CAAC,EAAjD,EAAqD;AACjD,UAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAR;AACA,UAAIM,IAAI,GAAGR,eAAe,CAACE,CAAD,CAA1B;AACAF,MAAAA,eAAe,CAACE,CAAD,CAAf,GAAqBF,eAAe,CAACI,CAAD,CAApC;AACAJ,MAAAA,eAAe,CAACI,CAAD,CAAf,GAAqBI,IAArB;AACH,KANmB,CAUpB;AACA;AACA;AAEA;;AAEH;;AAMDpB,EAAAA,SAAS,CAAC,MAAM;AAEZa,IAAAA,YAAY;;AAEZ,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA4B;AACxBH,MAAAA,SAAS,CAACU,IAAV,CAAeT,eAAe,CAACE,CAAD,CAA9B;AACH,KANW,CAQZ;;;AAEAN,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH,GAZQ,EAYP,EAZO,CAAT,CAnCe,CAiDf;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAIA,QAAMc,oBAAoB,GAAG,MAAM;AAC/BnB,IAAAA,OAAO,IAAI,CAAX;AACAoB,IAAAA,OAAO,CAACC,GAAR,CAAYrB,OAAZ;AACH,GAHD;;AAQF,sBACE;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAA,4BAOI;AAAA,gBAAKI,SAAS,GAAG,qBAAH,GAA2BL,SAAS,CAACU,eAAe,CAACT,OAAD,CAAhB,CAAT,CAAoCsB;AAA7E;AAAA;AAAA;AAAA;AAAA,YAPJ,eAQI;AAAQ,MAAA,OAAO,EAAEH,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA/GD;;GAAMlB,I;;KAAAA,I;AAiHN,eAAeA,IAAf","sourcesContent":["import React from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport { questions } from './Questions'\r\n\r\nlet counter = 0\r\n\r\n\r\nconst Quiz = () => {\r\n\r\n\r\n    const [fetchedQuestions, setFetchedQuestions] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [triggerChange, setTriggerChange] = useState(false)\r\n\r\n  \r\n    \r\n    let quizOrder = []\r\n    const questionNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\r\n    \r\n\r\n    function shuffleArray() {\r\n        for (var i = questionNumbers.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = questionNumbers[i];\r\n            questionNumbers[i] = questionNumbers[j];\r\n            questionNumbers[j] = temp;\r\n        }\r\n\r\n        \r\n\r\n        // for (let i = 0; i < 30; i++){\r\n        //     quizOrder.push(questionNumbers[i])\r\n        // }\r\n\r\n        // console.log(quizOrder)\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        shuffleArray();\r\n\r\n        for (let i = 0; i < 30; i++){\r\n            quizOrder.push(questionNumbers[i])\r\n        }\r\n\r\n        // console.log(quizOrder)\r\n\r\n        setIsLoading(false)\r\n        \r\n    },[])\r\n\r\n    // useEffect(() => {\r\n        \r\n        \r\n        \r\n        \r\n    //     console.log(questions[questionNumbers[0]])\r\n    //     console.log(questions[questionNumbers[1]])\r\n    //     console.log(questions[questionNumbers[2]])\r\n    //     console.log(questions[questionNumbers[3]])\r\n    //     console.log(questions[questionNumbers[4]])\r\n    //     console.log(questions[questionNumbers[5]])\r\n    //     console.log(questions[questionNumbers[6]])\r\n    //     console.log(questions[questionNumbers[7]])\r\n    //     console.log(questions[questionNumbers[8]])\r\n    //     console.log(questions[questionNumbers[9]])\r\n    //     console.log(questions[questionNumbers[10]])\r\n    //     console.log(questions[questionNumbers[11]])\r\n    //     console.log(questions[questionNumbers[12]])\r\n    //     console.log(questions[questionNumbers[13]])\r\n    //     console.log(questions[questionNumbers[14]])\r\n    //     console.log(questions[questionNumbers[15]])\r\n    //     console.log(questions[questionNumbers[16]])\r\n    //     console.log(questions[questionNumbers[17]])\r\n    //     console.log(questions[questionNumbers[18]])\r\n    //     console.log(questions[questionNumbers[19]])\r\n    //     console.log(questions[questionNumbers[20]])\r\n    //     console.log(questions[questionNumbers[21]])\r\n    //     console.log(questions[questionNumbers[22]])\r\n    //     console.log(questions[questionNumbers[23]])\r\n    //     console.log(questions[questionNumbers[24]])\r\n    //     console.log(questions[questionNumbers[25]])\r\n    //     console.log(questions[questionNumbers[26]])\r\n    //     console.log(questions[questionNumbers[27]])\r\n    //     console.log(questions[questionNumbers[28]])\r\n    //     console.log(questions[questionNumbers[29]])\r\n\r\n\r\n    // },[triggerChange])\r\n\r\n    \r\n\r\n    const handleQuestionChange = () => {\r\n        counter += 1\r\n        console.log(counter)\r\n    }\r\n\r\n    \r\n\r\n\r\n  return (\r\n    <div className='quiz-question-container'>\r\n        {/* <h2>{isLoading ? 'loading question...' : fetchedQuestion.question}</h2>\r\n        <button>{isLoading ? 'loading choice...' : fetchedQuestion.choiceA}</button>\r\n        <button>{isLoading ? 'loading choice...' : fetchedQuestion.choiceB}</button>\r\n        <button>{isLoading ? 'loading choice...' : fetchedQuestion.choiceC}</button>\r\n        <button>{isLoading ? 'loading choice...' : fetchedQuestion.choiceD}</button> */}\r\n\r\n        <h2>{isLoading ? 'loading question...' : questions[questionNumbers[counter]].question}</h2>\r\n        <button onClick={handleQuestionChange}>Next Question</button>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Quiz"]},"metadata":{},"sourceType":"module"}