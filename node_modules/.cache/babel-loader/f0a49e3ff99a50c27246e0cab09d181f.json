{"ast":null,"code":"import React, { useMemo, useEffect, useRef, useState, useCallback } from 'react';\nimport { createPortal } from 'react-dom';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nconst FOCUSABLE_SELETORS = ['a[href]', 'area[href]', 'input:not([disabled]):not([type=\"hidden\"]):not([aria-hidden])', 'select:not([disabled]):not([aria-hidden])', 'textarea:not([disabled]):not([aria-hidden])', 'button:not([disabled]):not([aria-hidden])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^=\"-\"])'];\n\nconst getFocusableNodes = element => {\n  return Object.values(element.querySelectorAll(FOCUSABLE_SELETORS));\n};\n\nconst focusFirstNode = element => {\n  const focusableNodes = getFocusableNodes(element);\n  let focusedElement;\n\n  if (focusableNodes.length) {\n    [focusedElement] = focusableNodes;\n    focusedElement.focus();\n  }\n\n  return focusedElement;\n};\n\nconst handleTabPress = (element, event) => {\n  const focusableNodes = getFocusableNodes(element);\n\n  if (!focusableNodes.length) {\n    return undefined;\n  }\n\n  const focusedElement = focusableNodes[0];\n\n  if (!element.contains(document.activeElement)) {\n    focusedElement.focus();\n    event.preventDefault();\n  } else {\n    const focusedItemIndex = focusableNodes.indexOf(document.activeElement);\n\n    if (event.shiftKey && focusedItemIndex === 0) {\n      focusableNodes[focusableNodes.length - 1].focus();\n      event.preventDefault();\n    }\n\n    if (!event.shiftKey && focusedItemIndex === focusableNodes.length - 1) {\n      focusedElement.focus();\n      event.preventDefault();\n    }\n\n    return focusableNodes[focusedItemIndex];\n  }\n\n  return focusedElement;\n};\n\nconst BASE_CLASS_NAME = 'react-micro-modal';\nconst PORTAL_CLASS_NAME = `${BASE_CLASS_NAME}--portal`;\nconst OVERLAY_BASE_STYLE = {\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0,\n  background: 'rgba(0, 0, 0, 0.6)',\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center'\n};\nconst DIALOG_BASE_STYLE = {\n  backgroundColor: '#fff',\n  padding: '30px',\n  maxWidth: '500px',\n  maxHeight: '100vh',\n  borderRadius: '4px',\n  overflowY: 'auto',\n  boxSizing: 'border-box'\n};\n\nconst createPortalRoot = () => {\n  const root = document.createElement('div');\n  root.className = PORTAL_CLASS_NAME;\n  return root;\n};\n\nconst ModalPortal = _ref => {\n  let {\n    parent,\n    children\n  } = _ref;\n  const node = useMemo(() => createPortalRoot(), []);\n\n  const getParent = () => {\n    var _a;\n\n    return (_a = parent === null || parent === void 0 ? void 0 : parent()) !== null && _a !== void 0 ? _a : document.body;\n  };\n\n  useEffect(() => {\n    getParent().appendChild(node);\n    return () => {\n      getParent().removeChild(node);\n    };\n  }, []);\n  return createPortal(children, node);\n};\n\nconst ESCAPE_KEY = 'Escape';\nconst TAB_KEY = 'Tab';\n\nconst getOverlayAnimationName = ariaHidden => {\n  return ariaHidden === 'false' ? 'modal-fade-in' : 'modal-fade-out';\n};\n\nconst getDialogAnimationName = ariaHidden => {\n  return ariaHidden === 'false' ? 'modal-slide-in' : 'modal-slide-out';\n};\n\nconst openContainerRefStack = [];\n\nfunction getLastOpenContainer() {\n  return openContainerRefStack[openContainerRefStack.length - 1];\n}\n\nconst MicroModal = _a => {\n  var {\n    trigger,\n    children,\n    open: isOpenParam,\n    handleClose: handleCloseParam,\n    parent: parentSelector,\n    openInitially,\n    closeOnAnimationEnd,\n    closeOnEscapePress = true,\n    closeOnOverlayClick = true,\n    disableFirstElementFocus\n  } = _a,\n      _b = _a.overrides,\n      _c = _b === void 0 ? {} : _b,\n      _d = _c.Root,\n      _e = _d === void 0 ? {\n    style: {}\n  } : _d,\n      {\n    style: rootStyleOverrides\n  } = _e,\n      rootOverrides = __rest(_e, [\"style\"]),\n      _f = _c.Overlay,\n      _g = _f === void 0 ? {\n    style: {},\n    className: ''\n  } : _f,\n      {\n    style: overlayStyleOverrides\n  } = _g,\n      overlayOverrides = __rest(_g, [\"style\"]),\n      _h = _c.Dialog,\n      _j = _h === void 0 ? {\n    style: {}\n  } : _h,\n      {\n    style: dialogStyleOverrides\n  } = _j,\n      dialogOverrides = __rest(_j, [\"style\"]);\n\n  const rootRef = useRef(null);\n  const dialogRef = useRef(null);\n  const lastActiveElement = useRef(null);\n  const [isModalOpen, setIsModalOpen] = useState(openInitially !== null && openInitially !== void 0 ? openInitially : false);\n  const [isClosing, setIsClosing] = useState(false);\n  const ariaHidden = isModalOpen && !isClosing ? 'false' : 'true';\n  const isControlled = useMemo(() => isOpenParam !== undefined, [isOpenParam]);\n  const isMounted = useRef(false);\n  const open = useCallback(() => {\n    setIsModalOpen(true);\n    setIsClosing(false);\n  }, [setIsModalOpen, setIsClosing]);\n  const close = useCallback(() => {\n    setIsModalOpen(false);\n    setIsClosing(false);\n  }, [setIsModalOpen, setIsClosing]);\n  const closeOrStartAnimating = useCallback(() => {\n    if (closeOnAnimationEnd) {\n      setIsClosing(true);\n    } else {\n      close();\n    }\n  }, [close, closeOnAnimationEnd]);\n  const handleClose = useCallback(() => {\n    if (isControlled) {\n      if (handleCloseParam) {\n        handleCloseParam();\n      } else if (process.env.NODE_ENV !== 'production') {\n        // eslint-disable-next-line no-console\n        console.warn('[react-micro-modal]: cannot close modal -- handleClose prop is required in controlled mode');\n      }\n    } else {\n      closeOrStartAnimating();\n    }\n  }, [isControlled, handleCloseParam, closeOrStartAnimating]);\n  const onKeydown = useCallback(event => {\n    if (dialogRef === getLastOpenContainer()) {\n      if (event.key === ESCAPE_KEY && closeOnEscapePress) {\n        event.stopPropagation();\n        handleClose();\n      }\n\n      if (event.key === TAB_KEY && dialogRef.current) {\n        handleTabPress(dialogRef.current, event);\n      }\n    }\n  }, [handleClose]);\n  const onClick = useCallback(event => {\n    if (event.target && dialogRef.current && !dialogRef.current.contains(event.target)) {\n      handleClose();\n      event.preventDefault();\n    }\n  }, [handleClose]); // Controlled component\n\n  useEffect(() => {\n    if (isMounted.current) {\n      if (isOpenParam === true) {\n        open();\n      } else if (isOpenParam === false) {\n        closeOrStartAnimating();\n      }\n    } else {\n      isMounted.current = true;\n    }\n  }, [isOpenParam]); // Animate\n\n  useEffect(() => {\n    const containerElement = dialogRef.current;\n\n    if (isClosing && containerElement) {\n      containerElement.addEventListener('animationend', function handler() {\n        close();\n        containerElement.removeEventListener('animationend', handler, false);\n      });\n    }\n  }, [isClosing]); // Stack & focus\n\n  useEffect(() => {\n    var _a, _b;\n\n    if (isModalOpen) {\n      lastActiveElement.current = document.activeElement;\n      openContainerRefStack.push(dialogRef);\n      document.addEventListener('keydown', onKeydown);\n\n      if (closeOnOverlayClick) {\n        (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener('click', onClick);\n      }\n\n      if (!disableFirstElementFocus && dialogRef.current) {\n        focusFirstNode(dialogRef.current);\n      }\n    } else {\n      document.removeEventListener('keydown', onKeydown);\n\n      if (closeOnOverlayClick) {\n        (_b = rootRef.current) === null || _b === void 0 ? void 0 : _b.removeEventListener('click', onClick);\n      }\n\n      openContainerRefStack.pop();\n\n      if (lastActiveElement.current) {\n        lastActiveElement.current.focus();\n        lastActiveElement.current = null;\n      }\n    }\n  }, [isModalOpen]);\n  return React.createElement(React.Fragment, null, trigger !== undefined && trigger(open), React.createElement(ModalPortal, {\n    parent: parentSelector\n  }, React.createElement(\"div\", Object.assign({\n    ref: rootRef,\n    \"aria-hidden\": ariaHidden,\n    style: Object.assign({\n      display: isModalOpen ? 'block' : 'none'\n    }, rootStyleOverrides)\n  }, rootOverrides), React.createElement(\"div\", Object.assign({\n    style: Object.assign(Object.assign(Object.assign({}, OVERLAY_BASE_STYLE), {\n      animation: `${getOverlayAnimationName(ariaHidden)} 0.3s cubic-bezier(0, 0, 0.2, 1)`\n    }), overlayStyleOverrides)\n  }, overlayOverrides), React.createElement(\"div\", Object.assign({\n    ref: dialogRef,\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    style: Object.assign(Object.assign(Object.assign({}, DIALOG_BASE_STYLE), {\n      animation: `${getDialogAnimationName(ariaHidden)} 0.3s cubic-bezier(0, 0, 0.2, 1)`\n    }), dialogStyleOverrides)\n  }, dialogOverrides), isModalOpen ? children(handleClose) : null)))));\n};\n\nexport default MicroModal;","map":{"version":3,"mappings":"","names":[],"sources":[],"sourcesContent":["import React, { useMemo, useEffect, useRef, useState, useCallback } from 'react';\nimport { createPortal } from 'react-dom';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FOCUSABLE_SELETORS = [\r\n    'a[href]',\r\n    'area[href]',\r\n    'input:not([disabled]):not([type=\"hidden\"]):not([aria-hidden])',\r\n    'select:not([disabled]):not([aria-hidden])',\r\n    'textarea:not([disabled]):not([aria-hidden])',\r\n    'button:not([disabled]):not([aria-hidden])',\r\n    'iframe',\r\n    'object',\r\n    'embed',\r\n    '[contenteditable]',\r\n    '[tabindex]:not([tabindex^=\"-\"])',\r\n];\r\nconst getFocusableNodes = (element) => {\r\n    return Object.values(element.querySelectorAll(FOCUSABLE_SELETORS));\r\n};\r\nconst focusFirstNode = (element) => {\r\n    const focusableNodes = getFocusableNodes(element);\r\n    let focusedElement;\r\n    if (focusableNodes.length) {\r\n        [focusedElement] = focusableNodes;\r\n        focusedElement.focus();\r\n    }\r\n    return focusedElement;\r\n};\r\nconst handleTabPress = (element, event) => {\r\n    const focusableNodes = getFocusableNodes(element);\r\n    if (!focusableNodes.length) {\r\n        return undefined;\r\n    }\r\n    const focusedElement = focusableNodes[0];\r\n    if (!element.contains(document.activeElement)) {\r\n        focusedElement.focus();\r\n        event.preventDefault();\r\n    }\r\n    else {\r\n        const focusedItemIndex = focusableNodes.indexOf(document.activeElement);\r\n        if (event.shiftKey && focusedItemIndex === 0) {\r\n            focusableNodes[focusableNodes.length - 1].focus();\r\n            event.preventDefault();\r\n        }\r\n        if (!event.shiftKey && focusedItemIndex === focusableNodes.length - 1) {\r\n            focusedElement.focus();\r\n            event.preventDefault();\r\n        }\r\n        return focusableNodes[focusedItemIndex];\r\n    }\r\n    return focusedElement;\r\n};\n\nconst BASE_CLASS_NAME = 'react-micro-modal';\r\nconst PORTAL_CLASS_NAME = `${BASE_CLASS_NAME}--portal`;\r\nconst OVERLAY_BASE_STYLE = {\r\n    position: 'fixed',\r\n    top: 0,\r\n    left: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    background: 'rgba(0, 0, 0, 0.6)',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n};\r\nconst DIALOG_BASE_STYLE = {\r\n    backgroundColor: '#fff',\r\n    padding: '30px',\r\n    maxWidth: '500px',\r\n    maxHeight: '100vh',\r\n    borderRadius: '4px',\r\n    overflowY: 'auto',\r\n    boxSizing: 'border-box',\r\n};\n\nconst createPortalRoot = () => {\r\n    const root = document.createElement('div');\r\n    root.className = PORTAL_CLASS_NAME;\r\n    return root;\r\n};\r\nconst ModalPortal = ({ parent, children }) => {\r\n    const node = useMemo(() => createPortalRoot(), []);\r\n    const getParent = () => {\r\n        var _a;\r\n        return (_a = parent === null || parent === void 0 ? void 0 : parent()) !== null && _a !== void 0 ? _a : document.body;\r\n    };\r\n    useEffect(() => {\r\n        getParent().appendChild(node);\r\n        return () => {\r\n            getParent().removeChild(node);\r\n        };\r\n    }, []);\r\n    return createPortal(children, node);\r\n};\n\nconst ESCAPE_KEY = 'Escape';\r\nconst TAB_KEY = 'Tab';\r\nconst getOverlayAnimationName = (ariaHidden) => {\r\n    return ariaHidden === 'false' ? 'modal-fade-in' : 'modal-fade-out';\r\n};\r\nconst getDialogAnimationName = (ariaHidden) => {\r\n    return ariaHidden === 'false' ? 'modal-slide-in' : 'modal-slide-out';\r\n};\r\nconst openContainerRefStack = [];\r\nfunction getLastOpenContainer() {\r\n    return openContainerRefStack[openContainerRefStack.length - 1];\r\n}\r\nconst MicroModal = (_a) => {\r\n    var { trigger, children, open: isOpenParam, handleClose: handleCloseParam, parent: parentSelector, openInitially, closeOnAnimationEnd, closeOnEscapePress = true, closeOnOverlayClick = true, disableFirstElementFocus } = _a, _b = _a.overrides, _c = _b === void 0 ? {} : _b, _d = _c.Root, _e = _d === void 0 ? { style: {} } : _d, { style: rootStyleOverrides } = _e, rootOverrides = __rest(_e, [\"style\"]), _f = _c.Overlay, _g = _f === void 0 ? {\r\n        style: {},\r\n        className: '',\r\n    } : _f, { style: overlayStyleOverrides } = _g, overlayOverrides = __rest(_g, [\"style\"]), _h = _c.Dialog, _j = _h === void 0 ? {\r\n        style: {},\r\n    } : _h, { style: dialogStyleOverrides } = _j, dialogOverrides = __rest(_j, [\"style\"]);\r\n    const rootRef = useRef(null);\r\n    const dialogRef = useRef(null);\r\n    const lastActiveElement = useRef(null);\r\n    const [isModalOpen, setIsModalOpen] = useState(openInitially !== null && openInitially !== void 0 ? openInitially : false);\r\n    const [isClosing, setIsClosing] = useState(false);\r\n    const ariaHidden = isModalOpen && !isClosing ? 'false' : 'true';\r\n    const isControlled = useMemo(() => isOpenParam !== undefined, [isOpenParam]);\r\n    const isMounted = useRef(false);\r\n    const open = useCallback(() => {\r\n        setIsModalOpen(true);\r\n        setIsClosing(false);\r\n    }, [setIsModalOpen, setIsClosing]);\r\n    const close = useCallback(() => {\r\n        setIsModalOpen(false);\r\n        setIsClosing(false);\r\n    }, [setIsModalOpen, setIsClosing]);\r\n    const closeOrStartAnimating = useCallback(() => {\r\n        if (closeOnAnimationEnd) {\r\n            setIsClosing(true);\r\n        }\r\n        else {\r\n            close();\r\n        }\r\n    }, [close, closeOnAnimationEnd]);\r\n    const handleClose = useCallback(() => {\r\n        if (isControlled) {\r\n            if (handleCloseParam) {\r\n                handleCloseParam();\r\n            }\r\n            else if (process.env.NODE_ENV !== 'production') {\r\n                // eslint-disable-next-line no-console\r\n                console.warn('[react-micro-modal]: cannot close modal -- handleClose prop is required in controlled mode');\r\n            }\r\n        }\r\n        else {\r\n            closeOrStartAnimating();\r\n        }\r\n    }, [isControlled, handleCloseParam, closeOrStartAnimating]);\r\n    const onKeydown = useCallback((event) => {\r\n        if (dialogRef === getLastOpenContainer()) {\r\n            if (event.key === ESCAPE_KEY && closeOnEscapePress) {\r\n                event.stopPropagation();\r\n                handleClose();\r\n            }\r\n            if (event.key === TAB_KEY && dialogRef.current) {\r\n                handleTabPress(dialogRef.current, event);\r\n            }\r\n        }\r\n    }, [handleClose]);\r\n    const onClick = useCallback((event) => {\r\n        if (event.target &&\r\n            dialogRef.current &&\r\n            !dialogRef.current.contains(event.target)) {\r\n            handleClose();\r\n            event.preventDefault();\r\n        }\r\n    }, [handleClose]);\r\n    // Controlled component\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            if (isOpenParam === true) {\r\n                open();\r\n            }\r\n            else if (isOpenParam === false) {\r\n                closeOrStartAnimating();\r\n            }\r\n        }\r\n        else {\r\n            isMounted.current = true;\r\n        }\r\n    }, [isOpenParam]);\r\n    // Animate\r\n    useEffect(() => {\r\n        const containerElement = dialogRef.current;\r\n        if (isClosing && containerElement) {\r\n            containerElement.addEventListener('animationend', function handler() {\r\n                close();\r\n                containerElement.removeEventListener('animationend', handler, false);\r\n            });\r\n        }\r\n    }, [isClosing]);\r\n    // Stack & focus\r\n    useEffect(() => {\r\n        var _a, _b;\r\n        if (isModalOpen) {\r\n            lastActiveElement.current = document.activeElement;\r\n            openContainerRefStack.push(dialogRef);\r\n            document.addEventListener('keydown', onKeydown);\r\n            if (closeOnOverlayClick) {\r\n                (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener('click', onClick);\r\n            }\r\n            if (!disableFirstElementFocus && dialogRef.current) {\r\n                focusFirstNode(dialogRef.current);\r\n            }\r\n        }\r\n        else {\r\n            document.removeEventListener('keydown', onKeydown);\r\n            if (closeOnOverlayClick) {\r\n                (_b = rootRef.current) === null || _b === void 0 ? void 0 : _b.removeEventListener('click', onClick);\r\n            }\r\n            openContainerRefStack.pop();\r\n            if (lastActiveElement.current) {\r\n                lastActiveElement.current.focus();\r\n                lastActiveElement.current = null;\r\n            }\r\n        }\r\n    }, [isModalOpen]);\r\n    return (React.createElement(React.Fragment, null,\r\n        trigger !== undefined && trigger(open),\r\n        React.createElement(ModalPortal, { parent: parentSelector },\r\n            React.createElement(\"div\", Object.assign({ ref: rootRef, \"aria-hidden\": ariaHidden, style: Object.assign({ display: isModalOpen ? 'block' : 'none' }, rootStyleOverrides) }, rootOverrides),\r\n                React.createElement(\"div\", Object.assign({ style: Object.assign(Object.assign(Object.assign({}, OVERLAY_BASE_STYLE), { animation: `${getOverlayAnimationName(ariaHidden)} 0.3s cubic-bezier(0, 0, 0.2, 1)` }), overlayStyleOverrides) }, overlayOverrides),\r\n                    React.createElement(\"div\", Object.assign({ ref: dialogRef, role: \"dialog\", \"aria-modal\": \"true\", style: Object.assign(Object.assign(Object.assign({}, DIALOG_BASE_STYLE), { animation: `${getDialogAnimationName(ariaHidden)} 0.3s cubic-bezier(0, 0, 0.2, 1)` }), dialogStyleOverrides) }, dialogOverrides), isModalOpen ? children(handleClose) : null))))));\r\n};\n\nexport default MicroModal;\n"]},"metadata":{},"sourceType":"module"}