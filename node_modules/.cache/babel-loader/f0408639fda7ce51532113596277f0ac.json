{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mykael Barnes\\\\Desktop\\\\Projects\\\\Melee Frame Data Quiz\\\\melee_quiz\\\\src\\\\components\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { questions } from './Questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet counter = 0;\nlet quizOrder = [];\nconst questionNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29];\n\nconst Quiz = () => {\n  _s();\n\n  const [fetchedQuestions, setFetchedQuestions] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [triggerChange, setTriggerChange] = useState(false);\n  const [testFinished, setTestFinished] = useState(false);\n\n  function shuffleArray() {\n    for (var i = questionNumbers.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = questionNumbers[i];\n      questionNumbers[i] = questionNumbers[j];\n      questionNumbers[j] = temp;\n    }\n\n    for (let i = 0; i < 30; i++) {\n      quizOrder.push(questionNumbers[i]);\n    } // console.log(quizOrder)\n\n  }\n\n  useEffect(() => {\n    shuffleArray();\n    setIsLoading(false);\n  }, []);\n\n  const handleQuestionChange = () => {\n    if (counter == 29) {\n      setTestFinished(true);\n      console.log('Out of questions!');\n    } else {\n      counter += 1;\n      console.log(counter);\n      setTriggerChange(!triggerChange);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-question-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: isLoading ? 'loading question...' : questions[quizOrder[counter]].question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: isLoading ? 'loading choice...' : questions[quizOrder[counter]].choiceA\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: isLoading ? 'loading choice...' : questions[quizOrder[counter]].choiceB\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: isLoading ? 'loading choice...' : questions[quizOrder[counter]].choiceC\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: isLoading ? 'loading choice...' : questions[quizOrder[counter]].choiceD\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), testFinished ? /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Finish Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleQuestionChange,\n      children: \"Next Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 56\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Quiz, \"+9sre2zlYA8VASAHATdPf8SsvD4=\");\n\n_c = Quiz;\nexport default Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Users/Mykael Barnes/Desktop/Projects/Melee Frame Data Quiz/melee_quiz/src/components/Quiz.js"],"names":["React","useEffect","useState","questions","counter","quizOrder","questionNumbers","Quiz","fetchedQuestions","setFetchedQuestions","isLoading","setIsLoading","triggerChange","setTriggerChange","testFinished","setTestFinished","shuffleArray","i","length","j","Math","floor","random","temp","push","handleQuestionChange","console","log","question","choiceA","choiceB","choiceC","choiceD"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,IAAIC,OAAO,GAAG,CAAd;AACA,IAAIC,SAAS,GAAG,EAAhB;AACI,MAAMC,eAAe,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,EAA2C,EAA3C,EAA+C,EAA/C,EAAmD,EAAnD,EAAuD,EAAvD,EAA2D,EAA3D,EAA+D,EAA/D,EAAmE,EAAnE,EAAuE,EAAvE,EAA2E,EAA3E,EAA+E,EAA/E,EAAmF,EAAnF,EAAuF,EAAvF,EAA2F,EAA3F,EAA+F,EAA/F,EAAmG,EAAnG,EAAuG,EAAvG,EAA2G,EAA3G,CAAxB;;AAGJ,MAAMC,IAAI,GAAG,MAAM;AAAA;;AAGf,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CP,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,KAAD,CAAhD;;AAOA,WAASc,YAAT,GAAwB;AACpB,SAAK,IAAIC,CAAC,GAAGX,eAAe,CAACY,MAAhB,GAAyB,CAAtC,EAAyCD,CAAC,GAAG,CAA7C,EAAgDA,CAAC,EAAjD,EAAqD;AACjD,UAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAR;AACA,UAAIM,IAAI,GAAGjB,eAAe,CAACW,CAAD,CAA1B;AACAX,MAAAA,eAAe,CAACW,CAAD,CAAf,GAAqBX,eAAe,CAACa,CAAD,CAApC;AACAb,MAAAA,eAAe,CAACa,CAAD,CAAf,GAAqBI,IAArB;AACH;;AAID,SAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA4B;AACxBZ,MAAAA,SAAS,CAACmB,IAAV,CAAelB,eAAe,CAACW,CAAD,CAA9B;AACH,KAZmB,CAcpB;;AAEH;;AAMDhB,EAAAA,SAAS,CAAC,MAAM;AAEZe,IAAAA,YAAY;AAEZL,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH,GANQ,EAMP,EANO,CAAT;;AASA,QAAMc,oBAAoB,GAAG,MAAM;AAG/B,QAAIrB,OAAO,IAAI,EAAf,EAAmB;AACfW,MAAAA,eAAe,CAAC,IAAD,CAAf;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,KAHD,MAGO;AACHvB,MAAAA,OAAO,IAAI,CAAX;AACAsB,MAAAA,OAAO,CAACC,GAAR,CAAYvB,OAAZ;AACAS,MAAAA,gBAAgB,CAAC,CAACD,aAAF,CAAhB;AACH;AACJ,GAXD;;AAcF,sBACE;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAA,4BAEI;AAAA,gBAAKF,SAAS,GAAG,qBAAH,GAA2BP,SAAS,CAACE,SAAS,CAACD,OAAD,CAAV,CAAT,CAA8BwB;AAAvE;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,gBAASlB,SAAS,GAAG,mBAAH,GAAyBP,SAAS,CAACE,SAAS,CAACD,OAAD,CAAV,CAAT,CAA8ByB;AAAzE;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA,gBAASnB,SAAS,GAAG,mBAAH,GAAyBP,SAAS,CAACE,SAAS,CAACD,OAAD,CAAV,CAAT,CAA8B0B;AAAzE;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAA,gBAASpB,SAAS,GAAG,mBAAH,GAAyBP,SAAS,CAACE,SAAS,CAACD,OAAD,CAAV,CAAT,CAA8B2B;AAAzE;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI;AAAA,gBAASrB,SAAS,GAAG,mBAAH,GAAyBP,SAAS,CAACE,SAAS,CAACD,OAAD,CAAV,CAAT,CAA8B4B;AAAzE;AAAA;AAAA;AAAA;AAAA,YANJ,EAQKlB,YAAY,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAkC;AAAQ,MAAA,OAAO,EAAEW,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARnD;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAvED;;GAAMlB,I;;KAAAA,I;AAyEN,eAAeA,IAAf","sourcesContent":["import React from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport { questions } from './Questions'\r\n\r\nlet counter = 0\r\nlet quizOrder = []\r\n    const questionNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\r\n\r\n\r\nconst Quiz = () => {\r\n\r\n\r\n    const [fetchedQuestions, setFetchedQuestions] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [triggerChange, setTriggerChange] = useState(false)\r\n    const [testFinished, setTestFinished] = useState(false)\r\n\r\n  \r\n    \r\n    \r\n    \r\n\r\n    function shuffleArray() {\r\n        for (var i = questionNumbers.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = questionNumbers[i];\r\n            questionNumbers[i] = questionNumbers[j];\r\n            questionNumbers[j] = temp;\r\n        }\r\n\r\n        \r\n\r\n        for (let i = 0; i < 30; i++){\r\n            quizOrder.push(questionNumbers[i])\r\n        }\r\n\r\n        // console.log(quizOrder)\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        shuffleArray();\r\n\r\n        setIsLoading(false)\r\n        \r\n    },[])\r\n\r\n\r\n    const handleQuestionChange = () => {\r\n        \r\n\r\n        if (counter == 29) {\r\n            setTestFinished(true)\r\n            console.log('Out of questions!')\r\n        } else {\r\n            counter += 1\r\n            console.log(counter)\r\n            setTriggerChange(!triggerChange)\r\n        }\r\n    }\r\n\r\n\r\n  return (\r\n    <div className='quiz-question-container'>\r\n\r\n        <h2>{isLoading ? 'loading question...' : questions[quizOrder[counter]].question}</h2>\r\n        <button>{isLoading ? 'loading choice...' : questions[quizOrder[counter]].choiceA}</button>\r\n        <button>{isLoading ? 'loading choice...' : questions[quizOrder[counter]].choiceB}</button>\r\n        <button>{isLoading ? 'loading choice...' : questions[quizOrder[counter]].choiceC}</button>\r\n        <button>{isLoading ? 'loading choice...' : questions[quizOrder[counter]].choiceD}</button>\r\n\r\n        {testFinished ? <button>Finish Quiz</button> : <button onClick={handleQuestionChange}>Next Question</button>}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Quiz"]},"metadata":{},"sourceType":"module"}