{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mykael Barnes\\\\Desktop\\\\Projects\\\\Melee Frame Data Quiz\\\\melee_quiz\\\\src\\\\components\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { questions } from './Questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Quiz = () => {\n  _s();\n\n  const [fetchedQuestions, setFetchedQuestions] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [triggerChange, setTriggerChange] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const quizOrder = [30];\n  useEffect(() => {\n    quizOrder = quizOrder.fill().map((_, index) => index + 1);\n    quizOrder.sort(() => Math.random() - 0.5);\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {}, [triggerChange]);\n\n  const fetchQuestions = () => {};\n\n  const handleQuestionChange = () => {\n    i += 1;\n    setTriggerChange(!triggerChange);\n    console.log(i);\n  };\n\n  let i = 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-question-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: questions[quizOrder[i]].question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleQuestionChange,\n      children: \"Next Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Quiz, \"hCHIF23vowQAqDmVpEWNCWvNQNw=\");\n\n_c = Quiz;\nexport default Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Users/Mykael Barnes/Desktop/Projects/Melee Frame Data Quiz/melee_quiz/src/components/Quiz.js"],"names":["React","useEffect","useState","questions","Quiz","fetchedQuestions","setFetchedQuestions","isLoading","setIsLoading","triggerChange","setTriggerChange","currentQuestion","setCurrentQuestion","quizOrder","fill","map","_","index","sort","Math","random","fetchQuestions","handleQuestionChange","i","console","log","question"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AAGf,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CJ,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACS,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,CAAC,CAAD,CAAtD;AAEA,QAAMW,SAAS,GAAG,CAAC,EAAD,CAAlB;AAIAZ,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,SAAS,GAAGA,SAAS,CAACC,IAAV,GAAiBC,GAAjB,CAAqB,CAACC,CAAD,EAAIC,KAAJ,KAAcA,KAAK,GAAG,CAA3C,CAAZ;AACAJ,IAAAA,SAAS,CAACK,IAAV,CAAe,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAArC;AAEAZ,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH,GANQ,EAMP,EANO,CAAT;AAQAP,EAAAA,SAAS,CAAC,MAAM,CAGf,CAHQ,EAGP,CAACQ,aAAD,CAHO,CAAT;;AAKA,QAAMY,cAAc,GAAG,MAAM,CAG5B,CAHD;;AAKA,QAAMC,oBAAoB,GAAG,MAAM;AAC/BC,IAAAA,CAAC,IAAI,CAAL;AACAb,IAAAA,gBAAgB,CAAC,CAACD,aAAF,CAAhB;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH,GAJD;;AAMA,MAAIA,CAAC,GAAG,CAAR;AAGF,sBACE;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAA,4BAOI;AAAA,gBAAKpB,SAAS,CAACU,SAAS,CAACU,CAAD,CAAV,CAAT,CAAwBG;AAA7B;AAAA;AAAA;AAAA;AAAA,YAPJ,eAQI;AAAQ,MAAA,OAAO,EAAEJ,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CApDD;;GAAMlB,I;;KAAAA,I;AAsDN,eAAeA,IAAf","sourcesContent":["import React from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport { questions } from './Questions'\r\n\r\nconst Quiz = () => {\r\n\r\n\r\n    const [fetchedQuestions, setFetchedQuestions] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [triggerChange, setTriggerChange] = useState(false)\r\n    const [currentQuestion, setCurrentQuestion] = useState(0)\r\n\r\n    const quizOrder = [30]\r\n    \r\n\r\n\r\n    useEffect(() => {\r\n        quizOrder = quizOrder.fill().map((_, index) => index + 1);\r\n        quizOrder.sort(() => Math.random() - 0.5);\r\n        \r\n        setIsLoading(false)\r\n        \r\n    },[])\r\n\r\n    useEffect(() => {\r\n        \r\n        \r\n    },[triggerChange])\r\n\r\n    const fetchQuestions = () => {\r\n\r\n        \r\n    }\r\n\r\n    const handleQuestionChange = () => {\r\n        i += 1\r\n        setTriggerChange(!triggerChange)\r\n        console.log(i)\r\n    }\r\n\r\n    let i = 0\r\n\r\n\r\n  return (\r\n    <div className='quiz-question-container'>\r\n        {/* <h2>{isLoading ? 'loading question...' : fetchedQuestion.question}</h2>\r\n        <button>{isLoading ? 'loading choice...' : fetchedQuestion.choiceA}</button>\r\n        <button>{isLoading ? 'loading choice...' : fetchedQuestion.choiceB}</button>\r\n        <button>{isLoading ? 'loading choice...' : fetchedQuestion.choiceC}</button>\r\n        <button>{isLoading ? 'loading choice...' : fetchedQuestion.choiceD}</button> */}\r\n\r\n        <h2>{questions[quizOrder[i]].question}</h2>\r\n        <button onClick={handleQuestionChange}>Next Question</button>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Quiz"]},"metadata":{},"sourceType":"module"}