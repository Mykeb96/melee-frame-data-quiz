{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mykael Barnes\\\\Desktop\\\\Projects\\\\Melee Frame Data Quiz\\\\melee_quiz\\\\src\\\\components\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { questions } from './Questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet counter = 0;\nlet quizOrder = [];\nconst questionNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29];\n\nconst Quiz = props => {\n  _s();\n\n  // console.log(props)\n  const [isLoading, setIsLoading] = useState(true);\n  const [triggerChange, setTriggerChange] = useState(false);\n  const [testCompleted, setTestCompleted] = useState(false);\n  const [currentChoice, setCurrentChoice] = useState('');\n  var choiceA = document.getElementById('choiceA');\n  var choiceB = document.getElementById('choiceB');\n  var choiceC = document.getElementById('choiceC');\n  var choiceD = document.getElementById('choiceD');\n\n  function shuffleArray() {\n    for (var i = questionNumbers.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = questionNumbers[i];\n      questionNumbers[i] = questionNumbers[j];\n      questionNumbers[j] = temp;\n    }\n\n    for (let i = 0; i < 30; i++) {\n      quizOrder.push(questionNumbers[i]);\n    }\n  }\n\n  useEffect(() => {\n    console.log(props);\n    shuffleArray();\n    setIsLoading(false);\n  }, []);\n\n  const handleQuestionChange = () => {\n    // console.log(questions[quizOrder[counter]].correctChoice)\n    if (currentChoice === questions[quizOrder[counter]].correctChoice) {\n      console.log('You made the Correct Choice!');\n      props.setPoints(prevActiveStep => prevActiveStep + 1);\n      console.log(props.points);\n      console.log(choiceA.value);\n      setCurrentChoice('');\n    } else {\n      console.log('You made the Incorrect Choice!');\n      setCurrentChoice('');\n    }\n\n    if (currentChoice != '' && counter != 30) {\n      counter += 1;\n      console.log(counter);\n      setTriggerChange(!triggerChange);\n    }\n\n    if (counter == 29) {\n      setTestCompleted(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-question-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"question-title\",\n      children: isLoading || props.isGameFinished ? 'loading question...' : questions[quizOrder[counter]].question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"choiceA\",\n      className: \"question-button\",\n      value: \"choiceA\",\n      onClick: () => setCurrentChoice(choiceA.value),\n      children: isLoading || props.isGameFinished ? 'loading choice...' : questions[quizOrder[counter]].choiceA\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"choiceB\",\n      className: \"question-button\",\n      value: \"choiceB\",\n      onClick: () => setCurrentChoice(choiceB.value),\n      children: isLoading || props.isGameFinished ? 'loading choice...' : questions[quizOrder[counter]].choiceB\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"choiceC\",\n      className: \"question-button\",\n      value: \"choiceC\",\n      onClick: () => setCurrentChoice(choiceC.value),\n      children: isLoading || props.isGameFinished ? 'loading choice...' : questions[quizOrder[counter]].choiceC\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"choiceD\",\n      className: \"question-button\",\n      value: \"choiceD\",\n      onClick: () => setCurrentChoice(choiceD.value),\n      children: isLoading || props.isGameFinished ? 'loading choice...' : questions[quizOrder[counter]].choiceD\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), testCompleted ? /*#__PURE__*/_jsxDEV(\"p\", {\n      onClick: () => {\n        handleQuestionChange();\n\n        if (currentChoice != '') {\n          props.setIsGameFinished(true);\n          setIsLoading(true);\n          console.log('points: ' + props.points);\n        }\n      },\n      children: \"Finish Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 26\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"bottom-button\",\n      onClick: handleQuestionChange,\n      children: \"Next Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Quiz, \"nQKoWxVx/V5n9XoYLnWSdQWtdnM=\");\n\n_c = Quiz;\nexport default Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Users/Mykael Barnes/Desktop/Projects/Melee Frame Data Quiz/melee_quiz/src/components/Quiz.js"],"names":["React","useEffect","useState","questions","counter","quizOrder","questionNumbers","Quiz","props","isLoading","setIsLoading","triggerChange","setTriggerChange","testCompleted","setTestCompleted","currentChoice","setCurrentChoice","choiceA","document","getElementById","choiceB","choiceC","choiceD","shuffleArray","i","length","j","Math","floor","random","temp","push","console","log","handleQuestionChange","correctChoice","setPoints","prevActiveStep","points","value","isGameFinished","question","setIsGameFinished"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport { questions } from './Questions'\r\n\r\nlet counter = 0\r\nlet quizOrder = []\r\nconst questionNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\r\n\r\nconst Quiz = (props) => {\r\n\r\n    // console.log(props)\r\n\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [triggerChange, setTriggerChange] = useState(false)\r\n    const [testCompleted, setTestCompleted] = useState(false)\r\n    const [currentChoice, setCurrentChoice] = useState('')\r\n\r\n\r\n    var choiceA = document.getElementById('choiceA')\r\n    var choiceB = document.getElementById('choiceB')\r\n    var choiceC = document.getElementById('choiceC')\r\n    var choiceD = document.getElementById('choiceD')\r\n\r\n\r\n    function shuffleArray() {\r\n        for (var i = questionNumbers.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = questionNumbers[i];\r\n            questionNumbers[i] = questionNumbers[j];\r\n            questionNumbers[j] = temp;\r\n        }\r\n\r\n        for (let i = 0; i < 30; i++){\r\n            quizOrder.push(questionNumbers[i])\r\n        }\r\n\r\n        \r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(props)\r\n\r\n        shuffleArray();\r\n        setIsLoading(false)\r\n        \r\n    },[])\r\n\r\n    const handleQuestionChange = () => {\r\n\r\n        // console.log(questions[quizOrder[counter]].correctChoice)\r\n        \r\n\r\n        if (currentChoice === questions[quizOrder[counter]].correctChoice) {\r\n            console.log('You made the Correct Choice!')\r\n            props.setPoints(prevActiveStep => prevActiveStep + 1)\r\n            console.log(props.points)\r\n            console.log(choiceA.value)\r\n            setCurrentChoice('')\r\n        } else {\r\n            console.log('You made the Incorrect Choice!')\r\n            setCurrentChoice('')\r\n        }\r\n\r\n        if (currentChoice != '' && counter != 30) {\r\n            \r\n                counter += 1\r\n                console.log(counter)\r\n                setTriggerChange(!triggerChange)\r\n            \r\n            \r\n            \r\n        }\r\n        \r\n\r\n        if (counter == 29) {\r\n            setTestCompleted(true)\r\n        }\r\n\r\n        \r\n\r\n\r\n    }\r\n\r\n\r\n\r\n  return (\r\n    <div className='quiz-question-container'>\r\n\r\n\r\n        {/* <h2 className='question-title'>{isLoading || props.isGameFinished ? 'loading question...' : questions[quizOrder[counter]].question}</h2>\r\n        <button id='choiceA' className='question-button' value='choiceA' onClick={() => setCurrentChoice(choiceA.value)}>{isLoading || props.isGameFinished ? 'loading choice...' : questions[quizOrder[counter]].choiceA}</button>\r\n        <button id='choiceB' className='question-button' value='choiceB' onClick={() => setCurrentChoice(choiceB.value)}>{isLoading || props.isGameFinished ? 'loading choice...' : questions[quizOrder[counter]].choiceB}</button>\r\n        <button id='choiceC' className='question-button' value='choiceC' onClick={() => setCurrentChoice(choiceC.value)}>{isLoading || props.isGameFinished ? 'loading choice...' : questions[quizOrder[counter]].choiceC}</button>\r\n        <button id='choiceD' className='question-button' value='choiceD' onClick={() => setCurrentChoice(choiceD.value)}>{isLoading || props.isGameFinished ? 'loading choice...' : questions[quizOrder[counter]].choiceD}</button> */}\r\n\r\n        <h2 className='question-title'>{isLoading || props.isGameFinished ? 'loading question...' : questions[quizOrder[counter]].question}</h2>\r\n        <p id='choiceA' className='question-button' value='choiceA' onClick={() => setCurrentChoice(choiceA.value)}>{isLoading || props.isGameFinished ? 'loading choice...' : questions[quizOrder[counter]].choiceA}</p>\r\n        <p id='choiceB' className='question-button' value='choiceB' onClick={() => setCurrentChoice(choiceB.value)}>{isLoading || props.isGameFinished ? 'loading choice...' : questions[quizOrder[counter]].choiceB}</p>\r\n        <p id='choiceC' className='question-button' value='choiceC' onClick={() => setCurrentChoice(choiceC.value)}>{isLoading || props.isGameFinished ? 'loading choice...' : questions[quizOrder[counter]].choiceC}</p>\r\n        <p id='choiceD' className='question-button' value='choiceD' onClick={() => setCurrentChoice(choiceD.value)}>{isLoading || props.isGameFinished ? 'loading choice...' : questions[quizOrder[counter]].choiceD}</p>\r\n\r\n\r\n        {/* {testCompleted ? <button onClick={() => {\r\n            handleQuestionChange()\r\n\r\n            if (currentChoice != '') {\r\n                props.setIsGameFinished(true)\r\n                setIsLoading(true)\r\n                \r\n                console.log('points: ' + props.points)\r\n                \r\n            }\r\n            \r\n\r\n            \r\n\r\n        }}>Finish Quiz</button> : <button class='bottom-button' onClick={handleQuestionChange}>Next Question</button>} */}\r\n\r\n        {testCompleted ? <p onClick={() => {\r\n            handleQuestionChange()\r\n\r\n            if (currentChoice != '') {\r\n                props.setIsGameFinished(true)\r\n                setIsLoading(true)\r\n                \r\n                console.log('points: ' + props.points)\r\n                \r\n            }\r\n            \r\n\r\n            \r\n\r\n        }}>Finish Quiz</p> : <button className='bottom-button' onClick={handleQuestionChange}>Next Question</button>}\r\n\r\n        \r\n        \r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Quiz"]},"metadata":{},"sourceType":"module"}