{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mykael Barnes\\\\Desktop\\\\Projects\\\\Melee Frame Data Quiz\\\\melee_quiz\\\\src\\\\components\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { questions } from './Questions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Quiz = () => {\n  _s();\n\n  const [fetchedQuestions, setFetchedQuestions] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [triggerChange, setTriggerChange] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const questionNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29];\n  let quizOrder = [];\n\n  function shuffleArray() {\n    for (var i = questionNumbers.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = questionNumbers[i];\n      questionNumbers[i] = questionNumbers[j];\n      questionNumbers[j] = temp;\n    }\n  }\n\n  useEffect(() => {\n    // const quizOrderGenerator = Array(30).fill().map((_, index) => index + 1);\n    // quizOrderGenerator.sort(() => Math.random() - 0.5);\n    // console.log(quizOrderGenerator)\n    shuffleArray(); // for (let i = 0; i < 30; i++) {\n    // quizOrder.push(quizOrderGenerator[i])\n    // }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    console.log(questionNumbers);\n    console.log(quizOrder);\n    console.log(questions[questionNumbers[0]]);\n    console.log(questions[questionNumbers[1]]);\n    console.log(questions[questionNumbers[2]]);\n    console.log(questions[questionNumbers[3]]);\n    console.log(questions[questionNumbers[4]]);\n    console.log(questions[questionNumbers[5]]);\n    console.log(questions[questionNumbers[6]]);\n    console.log(questions[questionNumbers[7]]);\n    console.log(questions[questionNumbers[8]]);\n    console.log(questions[questionNumbers[9]]);\n    console.log(questions[questionNumbers[10]]);\n    console.log(questions[questionNumbers[11]]);\n    console.log(questions[questionNumbers[12]]);\n    console.log(questions[questionNumbers[13]]);\n    console.log(questions[questionNumbers[14]]);\n    console.log(questions[questionNumbers[15]]);\n    console.log(questions[questionNumbers[16]]);\n    console.log(questions[questionNumbers[17]]);\n    console.log(questions[questionNumbers[18]]);\n    console.log(questions[questionNumbers[19]]);\n    console.log(questions[questionNumbers[20]]);\n    console.log(questions[questionNumbers[21]]);\n    console.log(questions[questionNumbers[22]]);\n    console.log(questions[questionNumbers[23]]);\n    console.log(questions[questionNumbers[24]]);\n    console.log(questions[questionNumbers[25]]);\n    console.log(questions[questionNumbers[26]]);\n    console.log(questions[questionNumbers[27]]);\n    console.log(questions[questionNumbers[28]]);\n    console.log(questions[questionNumbers[29]]);\n  }, [triggerChange]);\n  let counter = 0;\n\n  const handleQuestionChange = () => {\n    counter += 1;\n    setTriggerChange(!triggerChange);\n    console.log(counter);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-question-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: questions[questionNumbers[counter]].question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleQuestionChange,\n      children: \"Next Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Quiz, \"hCHIF23vowQAqDmVpEWNCWvNQNw=\");\n\n_c = Quiz;\nexport default Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/Users/Mykael Barnes/Desktop/Projects/Melee Frame Data Quiz/melee_quiz/src/components/Quiz.js"],"names":["React","useEffect","useState","questions","Quiz","fetchedQuestions","setFetchedQuestions","isLoading","setIsLoading","triggerChange","setTriggerChange","currentQuestion","setCurrentQuestion","questionNumbers","quizOrder","shuffleArray","i","length","j","Math","floor","random","temp","console","log","counter","handleQuestionChange","question"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,aAA1B;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AAGf,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CJ,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACS,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,CAAC,CAAD,CAAtD;AAKA,QAAMW,eAAe,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,EAA/B,EAAmC,EAAnC,EAAuC,EAAvC,EAA2C,EAA3C,EAA+C,EAA/C,EAAmD,EAAnD,EAAuD,EAAvD,EAA2D,EAA3D,EAA+D,EAA/D,EAAmE,EAAnE,EAAuE,EAAvE,EAA2E,EAA3E,EAA+E,EAA/E,EAAmF,EAAnF,EAAuF,EAAvF,EAA2F,EAA3F,EAA+F,EAA/F,EAAmG,EAAnG,EAAuG,EAAvG,EAA2G,EAA3G,CAAxB;AACA,MAAIC,SAAS,GAAG,EAAhB;;AAEA,WAASC,YAAT,GAAwB;AACpB,SAAK,IAAIC,CAAC,GAAGH,eAAe,CAACI,MAAhB,GAAyB,CAAtC,EAAyCD,CAAC,GAAG,CAA7C,EAAgDA,CAAC,EAAjD,EAAqD;AACjD,UAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAR;AACA,UAAIM,IAAI,GAAGT,eAAe,CAACG,CAAD,CAA1B;AACAH,MAAAA,eAAe,CAACG,CAAD,CAAf,GAAqBH,eAAe,CAACK,CAAD,CAApC;AACAL,MAAAA,eAAe,CAACK,CAAD,CAAf,GAAqBI,IAArB;AACH;AACJ;;AAMDrB,EAAAA,SAAS,CAAC,MAAM;AAEZ;AACA;AACA;AAEAc,IAAAA,YAAY,GANA,CASZ;AACA;AACA;;AAEAP,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH,GAfQ,EAeP,EAfO,CAAT;AAiBAP,EAAAA,SAAS,CAAC,MAAM;AAGZsB,IAAAA,OAAO,CAACC,GAAR,CAAYX,eAAZ;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYV,SAAZ;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,CAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,CAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,CAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,CAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,CAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,CAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,CAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,CAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,CAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,CAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAS,CAACU,eAAe,CAAC,EAAD,CAAhB,CAArB;AAGH,GArCQ,EAqCP,CAACJ,aAAD,CArCO,CAAT;AAuCA,MAAIgB,OAAO,GAAG,CAAd;;AAEA,QAAMC,oBAAoB,GAAG,MAAM;AAC/BD,IAAAA,OAAO,IAAI,CAAX;AACAf,IAAAA,gBAAgB,CAAC,CAACD,aAAF,CAAhB;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AACH,GAJD;;AASF,sBACE;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAA,4BAOI;AAAA,gBAAKtB,SAAS,CAACU,eAAe,CAACY,OAAD,CAAhB,CAAT,CAAoCE;AAAzC;AAAA;AAAA;AAAA;AAAA,YAPJ,eAQI;AAAQ,MAAA,OAAO,EAAED,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA3GD;;GAAMtB,I;;KAAAA,I;AA6GN,eAAeA,IAAf","sourcesContent":["import React from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport { questions } from './Questions'\r\n\r\nconst Quiz = () => {\r\n\r\n\r\n    const [fetchedQuestions, setFetchedQuestions] = useState([])\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [triggerChange, setTriggerChange] = useState(false)\r\n    const [currentQuestion, setCurrentQuestion] = useState(0)\r\n\r\n  \r\n    \r\n\r\n    const questionNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\r\n    let quizOrder = []\r\n\r\n    function shuffleArray() {\r\n        for (var i = questionNumbers.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Math.random() * (i + 1));\r\n            var temp = questionNumbers[i];\r\n            questionNumbers[i] = questionNumbers[j];\r\n            questionNumbers[j] = temp;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        // const quizOrderGenerator = Array(30).fill().map((_, index) => index + 1);\r\n        // quizOrderGenerator.sort(() => Math.random() - 0.5);\r\n        // console.log(quizOrderGenerator)\r\n\r\n        shuffleArray();\r\n        \r\n        \r\n        // for (let i = 0; i < 30; i++) {\r\n        // quizOrder.push(quizOrderGenerator[i])\r\n        // }\r\n        \r\n        setIsLoading(false)\r\n        \r\n    },[])\r\n\r\n    useEffect(() => {\r\n        \r\n        \r\n        console.log(questionNumbers)\r\n        console.log(quizOrder)\r\n        console.log(questions[questionNumbers[0]])\r\n        console.log(questions[questionNumbers[1]])\r\n        console.log(questions[questionNumbers[2]])\r\n        console.log(questions[questionNumbers[3]])\r\n        console.log(questions[questionNumbers[4]])\r\n        console.log(questions[questionNumbers[5]])\r\n        console.log(questions[questionNumbers[6]])\r\n        console.log(questions[questionNumbers[7]])\r\n        console.log(questions[questionNumbers[8]])\r\n        console.log(questions[questionNumbers[9]])\r\n        console.log(questions[questionNumbers[10]])\r\n        console.log(questions[questionNumbers[11]])\r\n        console.log(questions[questionNumbers[12]])\r\n        console.log(questions[questionNumbers[13]])\r\n        console.log(questions[questionNumbers[14]])\r\n        console.log(questions[questionNumbers[15]])\r\n        console.log(questions[questionNumbers[16]])\r\n        console.log(questions[questionNumbers[17]])\r\n        console.log(questions[questionNumbers[18]])\r\n        console.log(questions[questionNumbers[19]])\r\n        console.log(questions[questionNumbers[20]])\r\n        console.log(questions[questionNumbers[21]])\r\n        console.log(questions[questionNumbers[22]])\r\n        console.log(questions[questionNumbers[23]])\r\n        console.log(questions[questionNumbers[24]])\r\n        console.log(questions[questionNumbers[25]])\r\n        console.log(questions[questionNumbers[26]])\r\n        console.log(questions[questionNumbers[27]])\r\n        console.log(questions[questionNumbers[28]])\r\n        console.log(questions[questionNumbers[29]])\r\n\r\n\r\n    },[triggerChange])\r\n\r\n    let counter = 0\r\n\r\n    const handleQuestionChange = () => {\r\n        counter += 1\r\n        setTriggerChange(!triggerChange)\r\n        console.log(counter)\r\n    }\r\n\r\n    \r\n\r\n\r\n  return (\r\n    <div className='quiz-question-container'>\r\n        {/* <h2>{isLoading ? 'loading question...' : fetchedQuestion.question}</h2>\r\n        <button>{isLoading ? 'loading choice...' : fetchedQuestion.choiceA}</button>\r\n        <button>{isLoading ? 'loading choice...' : fetchedQuestion.choiceB}</button>\r\n        <button>{isLoading ? 'loading choice...' : fetchedQuestion.choiceC}</button>\r\n        <button>{isLoading ? 'loading choice...' : fetchedQuestion.choiceD}</button> */}\r\n\r\n        <h2>{questions[questionNumbers[counter]].question}</h2>\r\n        <button onClick={handleQuestionChange}>Next Question</button>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Quiz"]},"metadata":{},"sourceType":"module"}